<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyk</title>
  
  <subtitle>Java ajax，spring，mybatis</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T07:30:47.979Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zyk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ajax（一）</title>
    <link href="http://yoursite.com/2019/08/22/ajax%EF%BC%88%E4%B8%80%EF%BC%89-1/"/>
    <id>http://yoursite.com/2019/08/22/ajax（一）-1/</id>
    <published>2019-08-22T07:30:47.000Z</published>
    <updated>2019-08-22T07:30:47.979Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ajax（一）</title>
    <link href="http://yoursite.com/2019/08/22/ajax%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/22/ajax（一）/</id>
    <published>2019-08-22T07:28:06.000Z</published>
    <updated>2019-08-22T07:28:06.467Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="http://yoursite.com/2019/08/21/MybatisPlus/"/>
    <id>http://yoursite.com/2019/08/21/MybatisPlus/</id>
    <published>2019-08-21T07:59:25.000Z</published>
    <updated>2019-08-21T08:18:35.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus-代码生成器"><a href="#Mybatis-Plus-代码生成器" class="headerlink" title="Mybatis-Plus 代码生成器"></a>Mybatis-Plus 代码生成器</h1><h1 id="1-什么是Mybatis-Plus？"><a href="#1-什么是Mybatis-Plus？" class="headerlink" title="1:什么是Mybatis-Plus？"></a>1:什么是Mybatis-Plus？</h1><h3 id="MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。"><a href="#MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。" class="headerlink" title="MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。"></a>MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。</h3><h1 id="2：使用Mybatis-Plus的好处？"><a href="#2：使用Mybatis-Plus的好处？" class="headerlink" title="2：使用Mybatis-Plus的好处？"></a>2：使用Mybatis-Plus的好处？</h1><h3 id="开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。"><a href="#开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。" class="headerlink" title="开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。"></a>开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。</h3><h2 id="开始配置Mybatis-PLus代码生成器"><a href="#开始配置Mybatis-PLus代码生成器" class="headerlink" title="开始配置Mybatis-PLus代码生成器"></a>开始配置Mybatis-PLus代码生成器</h2><h2 id="创建一个springboot项目在pom文件中添加依赖"><a href="#创建一个springboot项目在pom文件中添加依赖" class="headerlink" title="创建一个springboot项目在pom文件中添加依赖"></a>创建一个springboot项目在pom文件中添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatisPlus 代码生成 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 使用freemarer模板引擎 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.28&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个类CodeGenerator，直接执行main方法就可以，代码如下"><a href="#创建一个类CodeGenerator，直接执行main方法就可以，代码如下" class="headerlink" title="创建一个类CodeGenerator，直接执行main方法就可以，代码如下"></a>创建一个类CodeGenerator，直接执行main方法就可以，代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">public class CodeGenerator &#123;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * &lt;p&gt;</span><br><span class="line">  * 读取控制台内容</span><br><span class="line">  * &lt;/p&gt;</span><br><span class="line">  */</span><br><span class="line"> public static String scanner(String tip) &#123;</span><br><span class="line">     Scanner scanner = new Scanner(System.in);</span><br><span class="line">     StringBuilder help = new StringBuilder();</span><br><span class="line">     help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class="line">     System.out.println(help.toString());</span><br><span class="line">     if (scanner.hasNext()) &#123;</span><br><span class="line">         String ipt = scanner.next();</span><br><span class="line">         if (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">             return ipt;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">     // 代码生成器</span><br><span class="line">     AutoGenerator mpg = new AutoGenerator();</span><br><span class="line">     </span><br><span class="line">     /**</span><br><span class="line">      * 使用了非默认模板引擎</span><br><span class="line">      */</span><br><span class="line">     // set freemarker engine</span><br><span class="line">     mpg.setTemplateEngine(new FreemarkerTemplateEngine());</span><br><span class="line">     </span><br><span class="line">     // 全局配置</span><br><span class="line">     GlobalConfig gc = new GlobalConfig();</span><br><span class="line">     final String projectPath = System.getProperty(&quot;user.dir&quot;);</span><br><span class="line">     gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);</span><br><span class="line">     gc.setAuthor(&quot;zyk&quot;);//作者</span><br><span class="line">     gc.setOpen(false);</span><br><span class="line">     // gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br><span class="line">     mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">     // 数据源配置</span><br><span class="line">     DataSourceConfig dsc = new DataSourceConfig();</span><br><span class="line">     dsc.setUrl(&quot;jdbc:mysql://localhost:3306/database?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;);</span><br><span class="line">     // dsc.setSchemaName(&quot;public&quot;);</span><br><span class="line">     dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">     dsc.setUsername(&quot;root&quot;);</span><br><span class="line">     dsc.setPassword(&quot;密码&quot;);</span><br><span class="line">     mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">     // 包配置</span><br><span class="line">     final PackageConfig pc = new PackageConfig();</span><br><span class="line">     pc.setModuleName(scanner(&quot;模块名&quot;));//模块名</span><br><span class="line">     pc.setParent(&quot;com.xxx.demo&quot;);//项目名</span><br><span class="line">     mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">     // 自定义配置</span><br><span class="line">     InjectionConfig cfg = new InjectionConfig() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void initMap() &#123;</span><br><span class="line">             // to do nothing</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     // 如果模板引擎是 freemarker</span><br><span class="line">     String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span><br><span class="line">     // 如果模板引擎是 velocity</span><br><span class="line">     // String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><span class="line"></span><br><span class="line">     // 自定义输出配置</span><br><span class="line">     List&lt;FileOutConfig&gt; focList = new ArrayList&lt;FileOutConfig&gt;();</span><br><span class="line">     // 自定义配置会被优先输出</span><br><span class="line">     focList.add(new FileOutConfig(templatePath) &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String outputFile(TableInfo tableInfo) &#123;</span><br><span class="line">             // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br><span class="line">             return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()</span><br><span class="line">                     + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     /*</span><br><span class="line">     cfg.setFileCreate(new IFileCreate() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span><br><span class="line">             // 判断自定义文件夹是否需要创建</span><br><span class="line">             checkDir(&quot;调用默认方法创建的目录&quot;);</span><br><span class="line">             return false;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     */</span><br><span class="line">     cfg.setFileOutConfigList(focList);</span><br><span class="line">     mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">     // 配置模板</span><br><span class="line">     TemplateConfig templateConfig = new TemplateConfig();</span><br><span class="line"></span><br><span class="line">     // 配置自定义输出模板</span><br><span class="line">     //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span><br><span class="line">     // templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span><br><span class="line">     // templateConfig.setService();</span><br><span class="line">     // templateConfig.setController();</span><br><span class="line"></span><br><span class="line">     templateConfig.setXml(null);</span><br><span class="line">     mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">     // 策略配置</span><br><span class="line">     StrategyConfig strategy = new StrategyConfig();</span><br><span class="line">     strategy.setNaming(NamingStrategy.underline_to_camel);// 数据库表映射到实体的命名策略</span><br><span class="line">     strategy.setColumnNaming(NamingStrategy.underline_to_camel);// 数据库表字段映射到实体的命名策略, 未指定按照 naming 执行</span><br><span class="line">//     strategy.setSuperEntityClass(&quot;com.xxx.application.common.BaseEntity&quot;);//自定义继承的Entity类全称，带包名</span><br><span class="line">     strategy.setEntityLombokModel(true);// 是否为lombok模型</span><br><span class="line">     strategy.setRestControllerStyle(true);// 生成 @RestController 控制器</span><br><span class="line">     // 公共父类</span><br><span class="line">//     strategy.setSuperControllerClass(&quot;com.xxx.application.common.BaseController&quot;);</span><br><span class="line">     // 写于父类中的公共字段</span><br><span class="line">//     strategy.setSuperEntityColumns(&quot;id&quot;);</span><br><span class="line">     strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><span class="line">     strategy.setControllerMappingHyphenStyle(true); // 驼峰转连字符 如 umps_user 变为 upms/user</span><br><span class="line">     strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);// 表前缀</span><br><span class="line">     mpg.setStrategy(strategy);</span><br><span class="line">     mpg.setTemplateEngine(new FreemarkerTemplateEngine());//设置模板引擎类型，默认为 velocity</span><br><span class="line">     mpg.execute();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis-Plus-代码生成器&quot;&gt;&lt;a href=&quot;#Mybatis-Plus-代码生成器&quot; class=&quot;headerlink&quot; title=&quot;Mybatis-Plus 代码生成器&quot;&gt;&lt;/a&gt;Mybatis-Plus 代码生成器&lt;/h1&gt;&lt;h1 id=&quot;1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>饿汉式</title>
    <link href="http://yoursite.com/2019/08/21/%E9%A5%BF%E6%B1%89%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/21/饿汉式/</id>
    <published>2019-08-21T06:59:57.000Z</published>
    <updated>2019-08-21T07:00:45.914Z</updated>
    
    <content type="html"><![CDATA[<p>#这是一个简单的饿汉式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Signleton1&#123;</span><br><span class="line">//饿汉式 初始化即创建实例对象</span><br><span class="line">private static Signleton1 signleton1 = new Signleton1();</span><br><span class="line">private Signleton1()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">public static Signleton1 getSignleton1()&#123;</span><br><span class="line">return signleton1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#这是一个简单的饿汉式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单例</title>
    <link href="http://yoursite.com/2019/08/21/%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/21/单例/</id>
    <published>2019-08-21T06:39:08.000Z</published>
    <updated>2019-08-22T07:20:05.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1：什么是单例模式？"><a href="#1：什么是单例模式？" class="headerlink" title="1：什么是单例模式？"></a>1：什么是单例模式？</h2><h3 id="单例模式指的是在整个应用周期中只能存在一个实例-在java中单例模式被广泛应用，比如spring管理的bean。"><a href="#单例模式指的是在整个应用周期中只能存在一个实例-在java中单例模式被广泛应用，比如spring管理的bean。" class="headerlink" title="单例模式指的是在整个应用周期中只能存在一个实例,在java中单例模式被广泛应用，比如spring管理的bean。"></a>单例模式指的是在整个应用周期中只能存在一个实例,在java中单例模式被广泛应用，比如spring管理的bean。</h3><h2 id="2：使用单例的好处？"><a href="#2：使用单例的好处？" class="headerlink" title="2：使用单例的好处？"></a>2：使用单例的好处？</h2><h3 id="使用单例可以避免实例对象被重复创建，能够有效地节省系统开销。"><a href="#使用单例可以避免实例对象被重复创建，能够有效地节省系统开销。" class="headerlink" title="使用单例可以避免实例对象被重复创建，能够有效地节省系统开销。"></a>使用单例可以避免实例对象被重复创建，能够有效地节省系统开销。</h3><h3 id="单例懒汉"><a href="#单例懒汉" class="headerlink" title="单例懒汉"></a>单例懒汉</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Signleton &#123;</span><br><span class="line"></span><br><span class="line">private static Signleton signleton;</span><br><span class="line">//私有的构造方法</span><br><span class="line">private Signleton()&#123;&#125;;</span><br><span class="line">public static Signleton getSignelton()&#123;</span><br><span class="line">if (signleton == null) &#123;</span><br><span class="line">return new Signleton();</span><br><span class="line">&#125;</span><br><span class="line">return signleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1：什么是单例模式？&quot;&gt;&lt;a href=&quot;#1：什么是单例模式？&quot; class=&quot;headerlink&quot; title=&quot;1：什么是单例模式？&quot;&gt;&lt;/a&gt;1：什么是单例模式？&lt;/h2&gt;&lt;h3 id=&quot;单例模式指的是在整个应用周期中只能存在一个实例-在java中单例模
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>testHexo</title>
    <link href="http://yoursite.com/2019/08/21/testHexo/"/>
    <id>http://yoursite.com/2019/08/21/testHexo/</id>
    <published>2019-08-21T06:21:21.000Z</published>
    <updated>2019-08-21T06:30:44.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>#####分割线可以使用 三个及以上的星号、减号、底线来表示 </p><hr><hr><hr><hr><hr><h4 id="删除线在需要删除的地方前后两端各家两个-。"><a href="#删除线在需要删除的地方前后两端各家两个-。" class="headerlink" title="删除线在需要删除的地方前后两端各家两个~~。"></a>删除线在需要删除的地方前后两端各家两个~~。</h4><p>没有删除这句话<br><del>删除这句话</del></p><p>下划线先可以使用html中的<u>&lt;/&gt;标签<br><u> 这回一个带下划线的文本 </u></u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>接口和抽象类的区别</title>
    <link href="http://yoursite.com/2019/08/21/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/08/21/接口和抽象类的区别/</id>
    <published>2019-08-21T06:02:32.000Z</published>
    <updated>2019-08-21T06:03:02.644Z</updated>
    
    <content type="html"><![CDATA[<p>接口和抽象类的区别<br><a href="https://blog.csdn.net/wbq620524/article/details/53032466" target="_blank" rel="noopener">https://blog.csdn.net/wbq620524/article/details/53032466</a><br><a href="https://www.cnblogs.com/yongjiapei/p/5494894.html" target="_blank" rel="noopener">https://www.cnblogs.com/yongjiapei/p/5494894.html</a><br>1：接口用interface修饰，抽象类用abstract修饰<br>2：接口只有抽象方法，没有普通方法，而抽象类可以有普通方法<br>3：接口可以多继承，而抽象类只能单继承<br>4：接口中定义的变量只能是公共的静态的常量，抽象类中的变量只是常量<br>5：抽象类在写抽象方法是需要abstract关键字来修饰，而接口不需要</p><p>抽象类<br>特点:<br>1.抽象类中可以构造方法<br>2.抽象类中可以存在普通属性，方法，静态属性和方法。<br>3.抽象类中可以存在抽象方法。<br>4.如果一个类中有一个抽象方法，那么当前类一定是抽象类；抽象类中不一定有抽象方法。<br>5.抽象类中的抽象方法，需要有子类实现，如果子类不实现，则子类也需要定义为抽象的。<br>接口<br>1.在接口中只有方法的声明，没有方法体。<br>2.在接口中只有常量，因为定义的变量，在编译的时候都会默认加上<br>public static final<br>3.在接口中的方法，永远都被public来修饰。<br>4.接口中没有构造方法，也不能实例化接口的对象。<br>5.接口可以实现多继承<br>6.接口中定义的方法都需要有实现类来实现，如果实现类不能实现接口中的所有方法<br>7.则实现类定义为抽象类。<br>接口和抽象类的相同点<br>接口都是被 public final修饰的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接口和抽象类的区别&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/wbq620524/article/details/53032466&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wbq6
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tomcat的下载与介绍</title>
    <link href="http://yoursite.com/2019/08/21/tomcat%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/08/21/tomcat的下载与介绍/</id>
    <published>2019-08-21T05:59:22.000Z</published>
    <updated>2019-08-21T05:59:22.707Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中==与equals的区别</title>
    <link href="http://yoursite.com/2019/08/21/Java%E4%B8%AD-%E4%B8%8Eequals%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/08/21/Java中-与equals的区别/</id>
    <published>2019-08-21T05:56:31.000Z</published>
    <updated>2019-08-21T05:56:31.552Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>title</title>
    <link href="http://yoursite.com/2019/08/21/shiro/"/>
    <id>http://yoursite.com/2019/08/21/shiro/</id>
    <published>2019-08-21T05:46:28.000Z</published>
    <updated>2019-08-21T05:50:33.860Z</updated>
    
    <content type="html"><![CDATA[<p>shiro是一个轻量级的权限验证框架：主要用来身份验证，授权，加密，会话管理</p><p>shiro的四大作用：<br>    认证 、 授权、 加密 、会话管理<br>shiro三大核心组件：<br>    Subject组件：代指当前用户<br>    SecurityManager组件：用于管理所有的Subject<br>    Reaml组件：用户验证用户的认证与授权</p><p>shiro<br>1：创建shiroConfig类 ，配置webfilterBean 把securityManager注册到webfilterBean(安全管理器)<br>    Bean中设置需要拦截的url，和需要放行的url</p><p>2: 创建SecurityManager（安全管理器） ，实例化DefaultWebSecurityManager,将realm交给SecurityManager<br>    管理。<br>    DefaultWebSecurityManager </p><p>3：创建自定义的Realm,继承Authorizing,重写认证和授权的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shiro是一个轻量级的权限验证框架：主要用来身份验证，授权，加密，会话管理&lt;/p&gt;
&lt;p&gt;shiro的四大作用：&lt;br&gt;    认证 、 授权、 加密 、会话管理&lt;br&gt;shiro三大核心组件：&lt;br&gt;    Subject组件：代指当前用户&lt;br&gt;    Securit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>title</title>
    <link href="http://yoursite.com/2019/08/21/title/"/>
    <id>http://yoursite.com/2019/08/21/title/</id>
    <published>2019-08-21T05:46:28.000Z</published>
    <updated>2019-08-21T06:31:44.351Z</updated>
    
    <content type="html"><![CDATA[<p>shiro是一个轻量级的权限验证框架：主要用来身份验证，授权，加密，会话管理</p><p>shiro的四大作用：<br>    认证 、 授权、 加密 、会话管理<br>shiro三大核心组件：<br>    Subject组件：代指当前用户<br>    SecurityManager组件：用于管理所有的Subject<br>    Reaml组件：用户验证用户的认证与授权</p><p>shiro<br>1：创建shiroConfig类 ，配置webfilterBean 把securityManager注册到webfilterBean(安全管理器)<br>    Bean中设置需要拦截的url，和需要放行的url</p><p>2: 创建SecurityManager（安全管理器） ，实例化DefaultWebSecurityManager,将realm交给SecurityManager<br>    管理。<br>    DefaultWebSecurityManager </p><p>3：创建自定义的Realm,继承Authorizing,重写认证和授权的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shiro是一个轻量级的权限验证框架：主要用来身份验证，授权，加密，会话管理&lt;/p&gt;
&lt;p&gt;shiro的四大作用：&lt;br&gt;    认证 、 授权、 加密 、会话管理&lt;br&gt;shiro三大核心组件：&lt;br&gt;    Subject组件：代指当前用户&lt;br&gt;    Securit
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好 hexo</title>
    <link href="http://yoursite.com/2019/07/29/%E4%BD%A0%E5%A5%BD-hexo/"/>
    <id>http://yoursite.com/2019/07/29/你好-hexo/</id>
    <published>2019-07-29T10:18:15.000Z</published>
    <updated>2019-07-29T10:18:15.315Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好 ，Hexo</title>
    <link href="http://yoursite.com/2019/07/29/%E4%BD%A0%E5%A5%BD-%EF%BC%8CHexo/"/>
    <id>http://yoursite.com/2019/07/29/你好-，Hexo/</id>
    <published>2019-07-29T10:14:47.000Z</published>
    <updated>2019-07-29T10:14:47.558Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/29/hello-world/"/>
    <id>http://yoursite.com/2019/07/29/hello-world/</id>
    <published>2019-07-29T09:51:14.146Z</published>
    <updated>2019-07-29T09:51:14.146Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
