<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyk</title>
  
  <subtitle>Java ajax，spring，mybatis</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T08:45:40.255Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zyk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2019/08/22/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/22/单例模式/</id>
    <published>2019-08-22T08:42:54.000Z</published>
    <updated>2019-08-22T08:45:40.255Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">菜鸟教程单例模式</a></p><h3 id="单例是什么？"><a href="#单例是什么？" class="headerlink" title="单例是什么？"></a>单例是什么？</h3><p> 单例是在整个程序生命周期中只会创建一次实例的对象,不会被其他对象实例化,节省了系统开销</p><h3 id="实现单例的三种方法"><a href="#实现单例的三种方法" class="headerlink" title="实现单例的三种方法"></a>实现单例的三种方法</h3><pre><code>1 懒汉式单例</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    public class Signleton &#123;</span><br><span class="line">//懒汉式单例非安全的</span><br><span class="line"></span><br><span class="line">//static 静态的保证程序在启动时就实例化对象</span><br><span class="line">private static Signleton signleton;</span><br><span class="line"></span><br><span class="line">public static Signleton getSignleton()&#123;</span><br><span class="line">if (signleton == null) &#123;</span><br><span class="line">return new Signleton();</span><br><span class="line">&#125;</span><br><span class="line">return signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 私有其构造方法外部类无法创建实例对象</span><br><span class="line"> */</span><br><span class="line">private Signleton()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2懒汉时安全单例，只是加了synchronized关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Signleton2&#123;</span><br><span class="line"></span><br><span class="line">private static Signleton2 signleton2;</span><br><span class="line">/**</span><br><span class="line"> * 添加synchronized关键字，线程同步</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static synchronized Signleton2 getSignleton()&#123;</span><br><span class="line">if (signleton2 == null) &#123;</span><br><span class="line">return new Signleton2();</span><br><span class="line">&#125;</span><br><span class="line">return signleton2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private Signleton2()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3饿汉式单例<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> class Signleton3&#123;</span><br><span class="line">// 饿汉式是安全的单例</span><br><span class="line">private static Signleton3 signleton3 = new Signleton3();</span><br><span class="line"></span><br><span class="line">public static Signleton3 getSignleton3()&#123;</span><br><span class="line">return signleton3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Signleton3()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/singleton-pattern.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程单例模式&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;单例是什么？&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="http://yoursite.com/2019/08/21/MybatisPlus/"/>
    <id>http://yoursite.com/2019/08/21/MybatisPlus/</id>
    <published>2019-08-21T07:59:25.000Z</published>
    <updated>2019-08-22T09:26:05.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus-代码生成器"><a href="#Mybatis-Plus-代码生成器" class="headerlink" title="Mybatis-Plus 代码生成器"></a>Mybatis-Plus 代码生成器</h1><h1 id="1-什么是Mybatis-Plus？"><a href="#1-什么是Mybatis-Plus？" class="headerlink" title="1:什么是Mybatis-Plus？"></a>1:什么是Mybatis-Plus？</h1><h3 id="MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。"><a href="#MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。" class="headerlink" title="MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。"></a>MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。</h3><h1 id="2：使用Mybatis-Plus的好处？"><a href="#2：使用Mybatis-Plus的好处？" class="headerlink" title="2：使用Mybatis-Plus的好处？"></a>2：使用Mybatis-Plus的好处？</h1><h3 id="开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。"><a href="#开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。" class="headerlink" title="开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。"></a>开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。</h3><h2 id="开始配置Mybatis-PLus代码生成器"><a href="#开始配置Mybatis-PLus代码生成器" class="headerlink" title="开始配置Mybatis-PLus代码生成器"></a>开始配置Mybatis-PLus代码生成器</h2><h2 id="创建一个springboot项目在pom文件中添加依赖"><a href="#创建一个springboot项目在pom文件中添加依赖" class="headerlink" title="创建一个springboot项目在pom文件中添加依赖"></a>创建一个springboot项目在pom文件中添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatisPlus 代码生成 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 使用freemarer模板引擎 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.28&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个类CodeGenerator，直接执行main方法就可以，代码如下"><a href="#创建一个类CodeGenerator，直接执行main方法就可以，代码如下" class="headerlink" title="创建一个类CodeGenerator，直接执行main方法就可以，代码如下"></a>创建一个类CodeGenerator，直接执行main方法就可以，代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">public class CodeGenerator &#123;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * &lt;p&gt;</span><br><span class="line">  * 读取控制台内容</span><br><span class="line">  * &lt;/p&gt;</span><br><span class="line">  */</span><br><span class="line"> public static String scanner(String tip) &#123;</span><br><span class="line">     Scanner scanner = new Scanner(System.in);</span><br><span class="line">     StringBuilder help = new StringBuilder();</span><br><span class="line">     help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class="line">     System.out.println(help.toString());</span><br><span class="line">     if (scanner.hasNext()) &#123;</span><br><span class="line">         String ipt = scanner.next();</span><br><span class="line">         if (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">             return ipt;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">     // 代码生成器</span><br><span class="line">     AutoGenerator mpg = new AutoGenerator();</span><br><span class="line">     </span><br><span class="line">     /**</span><br><span class="line">      * 使用了非默认模板引擎</span><br><span class="line">      */</span><br><span class="line">     // set freemarker engine</span><br><span class="line">     mpg.setTemplateEngine(new FreemarkerTemplateEngine());</span><br><span class="line">     </span><br><span class="line">     // 全局配置</span><br><span class="line">     GlobalConfig gc = new GlobalConfig();</span><br><span class="line">     final String projectPath = System.getProperty(&quot;user.dir&quot;);</span><br><span class="line">     gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);</span><br><span class="line">     gc.setAuthor(&quot;zyk&quot;);//作者</span><br><span class="line">     gc.setOpen(false);</span><br><span class="line">     // gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br><span class="line">     mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">     // 数据源配置</span><br><span class="line">     DataSourceConfig dsc = new DataSourceConfig();</span><br><span class="line">     dsc.setUrl(&quot;jdbc:mysql://localhost:3306/database?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;);</span><br><span class="line">     // dsc.setSchemaName(&quot;public&quot;);</span><br><span class="line">     dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">     dsc.setUsername(&quot;root&quot;);</span><br><span class="line">     dsc.setPassword(&quot;密码&quot;);</span><br><span class="line">     mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">     // 包配置</span><br><span class="line">     final PackageConfig pc = new PackageConfig();</span><br><span class="line">     pc.setModuleName(scanner(&quot;模块名&quot;));//模块名</span><br><span class="line">     pc.setParent(&quot;com.xxx.demo&quot;);//项目名</span><br><span class="line">     mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">     // 自定义配置</span><br><span class="line">     InjectionConfig cfg = new InjectionConfig() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void initMap() &#123;</span><br><span class="line">             // to do nothing</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     // 如果模板引擎是 freemarker</span><br><span class="line">     String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span><br><span class="line">     // 如果模板引擎是 velocity</span><br><span class="line">     // String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><span class="line"></span><br><span class="line">     // 自定义输出配置</span><br><span class="line">     List&lt;FileOutConfig&gt; focList = new ArrayList&lt;FileOutConfig&gt;();</span><br><span class="line">     // 自定义配置会被优先输出</span><br><span class="line">     focList.add(new FileOutConfig(templatePath) &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String outputFile(TableInfo tableInfo) &#123;</span><br><span class="line">             // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br><span class="line">             return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()</span><br><span class="line">                     + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     /*</span><br><span class="line">     cfg.setFileCreate(new IFileCreate() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span><br><span class="line">             // 判断自定义文件夹是否需要创建</span><br><span class="line">             checkDir(&quot;调用默认方法创建的目录&quot;);</span><br><span class="line">             return false;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     */</span><br><span class="line">     cfg.setFileOutConfigList(focList);</span><br><span class="line">     mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">     // 配置模板</span><br><span class="line">     TemplateConfig templateConfig = new TemplateConfig();</span><br><span class="line"></span><br><span class="line">     // 配置自定义输出模板</span><br><span class="line">     //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span><br><span class="line">     // templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span><br><span class="line">     // templateConfig.setService();</span><br><span class="line">     // templateConfig.setController();</span><br><span class="line"></span><br><span class="line">     templateConfig.setXml(null);</span><br><span class="line">     mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">     // 策略配置</span><br><span class="line">     StrategyConfig strategy = new StrategyConfig();</span><br><span class="line">     strategy.setNaming(NamingStrategy.underline_to_camel);// 数据库表映射到实体的命名策略</span><br><span class="line">     strategy.setColumnNaming(NamingStrategy.underline_to_camel);// 数据库表字段映射到实体的命名策略, 未指定按照 naming 执行</span><br><span class="line">//     strategy.setSuperEntityClass(&quot;com.xxx.application.common.BaseEntity&quot;);//自定义继承的Entity类全称，带包名</span><br><span class="line">     strategy.setEntityLombokModel(true);// 是否为lombok模型</span><br><span class="line">     strategy.setRestControllerStyle(true);// 生成 @RestController 控制器</span><br><span class="line">     // 公共父类</span><br><span class="line">//     strategy.setSuperControllerClass(&quot;com.xxx.application.common.BaseController&quot;);</span><br><span class="line">     // 写于父类中的公共字段</span><br><span class="line">//     strategy.setSuperEntityColumns(&quot;id&quot;);</span><br><span class="line">     strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><span class="line">     strategy.setControllerMappingHyphenStyle(true); // 驼峰转连字符 如 umps_user 变为 upms/user</span><br><span class="line">     strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);// 表前缀</span><br><span class="line">     mpg.setStrategy(strategy);</span><br><span class="line">     mpg.setTemplateEngine(new FreemarkerTemplateEngine());//设置模板引擎类型，默认为 velocity</span><br><span class="line">     mpg.execute();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis-Plus-代码生成器&quot;&gt;&lt;a href=&quot;#Mybatis-Plus-代码生成器&quot; class=&quot;headerlink&quot; title=&quot;Mybatis-Plus 代码生成器&quot;&gt;&lt;/a&gt;Mybatis-Plus 代码生成器&lt;/h1&gt;&lt;h1 id=&quot;1
      
    
    </summary>
    
    
  </entry>
  
</feed>
