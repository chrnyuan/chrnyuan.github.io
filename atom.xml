<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyk</title>
  
  <subtitle>Java ajax，spring，mybatis</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-09T05:06:49.939Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zyk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生成图片验证码Kaptcha</title>
    <link href="http://yoursite.com/2019/09/09/%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81Kaptcha/"/>
    <id>http://yoursite.com/2019/09/09/生成图片验证码Kaptcha/</id>
    <published>2019-09-09T03:35:26.000Z</published>
    <updated>2019-09-09T05:06:49.939Z</updated>
    
    <content type="html"><![CDATA[<p>图片验证码一般是为了网站的登录或其他接口被被恶意请求</p><p>Google的Kapatcha验证码是一个简单容易上手的验证码工具。</p><a id="more"></a><p>一：创建springboot项目,pom文件中添加Kaptcha的Maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.axet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>二：配置Kaptcha的Bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 验证码配置</span><br><span class="line"> * @author ZYK</span><br><span class="line"> * 2019年9月9日 上午10:55:38</span><br><span class="line"> * Desc:</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class KaptchaConfig &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public DefaultKaptcha producer()&#123;</span><br><span class="line"></span><br><span class="line">Properties properties = new Properties();</span><br><span class="line"></span><br><span class="line">properties.put(&quot;kaptcha.border&quot; , &quot;no&quot;);//</span><br><span class="line">    properties.put(&quot;kaptcha.textproducer.font.color&quot; , &quot;blue&quot;);//设置字体颜色</span><br><span class="line">    properties.put(&quot;kaptcha.textproducer.char.space&quot; , &quot;5&quot;);</span><br><span class="line">    </span><br><span class="line">DefaultKaptcha defaultKaptcha = new DefaultKaptcha();</span><br><span class="line">Config config = new Config(properties);</span><br><span class="line">defaultKaptcha.setConfig(config);</span><br><span class="line">return defaultKaptcha;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三：代码实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">@AllArgsConstructor//生成一个包含所有参数的构造方法</span><br><span class="line">public class TestController &#123;</span><br><span class="line">//@Autowired</span><br><span class="line">private Producer producer;</span><br><span class="line">/**</span><br><span class="line">     * 使用google的kaptcha生成验证码</span><br><span class="line">     */</span><br><span class="line">    @SneakyThrows</span><br><span class="line">    @RequestMapping(&quot;/sys/code&quot;)</span><br><span class="line">    public void captcha( HttpServletResponse response) &#123;</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot; , &quot;no-store, no-cache&quot;);</span><br><span class="line">        response.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">        //生成文字验证码</span><br><span class="line">        String text = producer.createText();</span><br><span class="line">        log.info(&quot;==================验证码:&#123;&#125;====================&quot; , text);</span><br><span class="line">        //生成图片验证码</span><br><span class="line">        BufferedImage image = producer.createImage(text);</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        ImageIO.write(image, &quot;jpg&quot; , out);</span><br><span class="line">        IOUtils.closeQuietly(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端完成</p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图片验证码一般是为了网站的登录或其他接口被被恶意请求&lt;/p&gt;
&lt;p&gt;Google的Kapatcha验证码是一个简单容易上手的验证码工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="验证码" scheme="http://yoursite.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
      <category term="Kaptcha" scheme="http://yoursite.com/tags/Kaptcha/"/>
    
  </entry>
  
  <entry>
    <title>设置mysql远程连接</title>
    <link href="http://yoursite.com/2019/09/07/%E8%AE%BE%E7%BD%AEmysql%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/09/07/设置mysql远程连接/</id>
    <published>2019-09-07T07:35:08.000Z</published>
    <updated>2019-09-07T07:39:36.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在linux中安装完mysql服务器后一般需要设置远程链接"><a href="#在linux中安装完mysql服务器后一般需要设置远程链接" class="headerlink" title="在linux中安装完mysql服务器后一般需要设置远程链接"></a>在linux中安装完mysql服务器后一般需要设置远程链接</h3><p>使用mysql图形化工具navicat,点击连接，填写账号密码。</p><p>出现报错<br>检查服务防火墙是否关闭，<br>3306端口是否可以访问</p><a id="more"></a><p>进入服务器，登录mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp1exnqsdfhdzz24q8dgz ~]# sudo mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 61</span><br><span class="line">Server version: 5.1.73-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br></pre></td></tr></table></figure><p>二：进入mysql数据库，修改user表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#进入mysql数据库</span><br><span class="line">use mysql</span><br><span class="line">#修改user表设置root用户任何IP都可以访问</span><br><span class="line">update user set host = &apos;%&apos; where user = &apos;root&apos;;</span><br><span class="line">#刷新该表</span><br><span class="line">frush privileges;</span><br></pre></td></tr></table></figure><p>现在通过Navicat应该可以连接</p><p>如果还报错的话并且错误码为10061的话可能mysql服务器默认绑定127.0.0.1端口</p><p>修改mysql配置文件<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#这个是ubuntu的mysql文件地址</span><br><span class="line">vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>找到如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Instead of skip-networking the default is now to listen only on</span><br><span class="line"># localhost which is more compatible and is not less secure.</span><br><span class="line"></span><br><span class="line">#将bind-address 127.0.0.1注释掉就好了</span><br><span class="line">#bind-address           = 127.0.0.1</span><br></pre></td></tr></table></figure><p>最后重启mysql服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure><p>ok，现在应该可以连接成功</p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在linux中安装完mysql服务器后一般需要设置远程链接&quot;&gt;&lt;a href=&quot;#在linux中安装完mysql服务器后一般需要设置远程链接&quot; class=&quot;headerlink&quot; title=&quot;在linux中安装完mysql服务器后一般需要设置远程链接&quot;&gt;&lt;/a&gt;在linux中安装完mysql服务器后一般需要设置远程链接&lt;/h3&gt;&lt;p&gt;使用mysql图形化工具navicat,点击连接，填写账号密码。&lt;/p&gt;
&lt;p&gt;出现报错&lt;br&gt;检查服务防火墙是否关闭，&lt;br&gt;3306端口是否可以访问&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="http://yoursite.com/2019/09/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2019/09/05/文件上传/</id>
    <published>2019-09-05T05:11:19.000Z</published>
    <updated>2019-09-05T06:42:12.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件上传就是io"><a href="#文件上传就是io" class="headerlink" title="文件上传就是io"></a>文件上传就是io</h3><a id="more"></a><p>前端部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;文件上传示例&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;/uploadFile&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">上传文件：&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>后端部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@PostMapping(value=&quot;uploadFile&quot;,produces=&quot;application/json;charset=UTF-8&quot;)</span><br><span class="line">public String uploadFile(MultipartFile file,HttpServletRequest request,HttpServletResponse response) throws IOException&#123;</span><br><span class="line">//获取到文件名</span><br><span class="line">String fileName = file.getOriginalFilename();</span><br><span class="line">String newFileName = &quot;D://images//&quot;+makeFileName(fileName);</span><br><span class="line">Path path = Paths.get(newFileName);</span><br><span class="line">InputStream in = file.getInputStream();</span><br><span class="line">Files.copy(in, path);</span><br><span class="line">in.close();</span><br><span class="line">return &quot;上传成功&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件名加UUID</span><br><span class="line"> * @param fileName</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public String makeFileName(String fileName)&#123;</span><br><span class="line">String UUIDFileName = UUID.randomUUID().toString()+&quot;_&quot;+fileName;</span><br><span class="line">return UUIDFileName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;文件上传就是io&quot;&gt;&lt;a href=&quot;#文件上传就是io&quot; class=&quot;headerlink&quot; title=&quot;文件上传就是io&quot;&gt;&lt;/a&gt;文件上传就是io&lt;/h3&gt;
    
    </summary>
    
      <category term="文件上传与下载" scheme="http://yoursite.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="IO" scheme="http://yoursite.com/tags/IO/"/>
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot文件上传时，出现文件大小超过限制异常</title>
    <link href="http://yoursite.com/2019/09/04/springboot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E8%B6%85%E8%BF%87%E9%99%90%E5%88%B6%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/09/04/springboot文件上传时，出现文件大小超过限制异常/</id>
    <published>2019-09-04T08:19:40.000Z</published>
    <updated>2019-09-05T06:07:14.523Z</updated>
    
    <content type="html"><![CDATA[<h4 id="springboot文件上传报org-apache-tomcat-util-http-fileupload-FileUploadBase-FileSizeLimitExceededException-The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes-异常"><a href="#springboot文件上传报org-apache-tomcat-util-http-fileupload-FileUploadBase-FileSizeLimitExceededException-The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes-异常" class="headerlink" title="springboot文件上传报org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes.异常"></a>springboot文件上传报org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes.异常</h4><a id="more"></a><h3 id="具体异常内容："><a href="#具体异常内容：" class="headerlink" title="具体异常内容："></a>具体异常内容：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes.</span><br><span class="line">at org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl$FileItemStreamImpl$1.raiseError(FileUploadBase.java:633) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.http.fileupload.util.LimitedInputStream.checkLimit(LimitedInputStream.java:76) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.http.fileupload.util.LimitedInputStream.read(LimitedInputStream.java:135) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at java.io.FilterInputStream.read(FilterInputStream.java:107) ~[na:1.8.0_121]</span><br><span class="line">at org.apache.tomcat.util.http.fileupload.util.Streams.copy(Streams.java:98) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.http.fileupload.util.Streams.copy(Streams.java:68) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.http.fileupload.FileUploadBase.parseRequest(FileUploadBase.java:293) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.connector.Request.parseParts(Request.java:2846) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.connector.Request.getParts(Request.java:2754) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.connector.RequestFacade.getParts(RequestFacade.java:1098) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at javax.servlet.http.HttpServletRequestWrapper.getParts(HttpServletRequestWrapper.java:356) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.parseRequest(StandardMultipartHttpServletRequest.java:94) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.multipart.support.StandardMultipartHttpServletRequest.&lt;init&gt;(StandardMultipartHttpServletRequest.java:87) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.multipart.support.StandardServletMultipartResolver.resolveMultipart(StandardServletMultipartResolver.java:87) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.checkMultipart(DispatcherServlet.java:1175) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1010) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449) ~[shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365) ~[shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362) ~[shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125) ~[shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) ~[tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]</span><br></pre></td></tr></table></figure><h3 id="原因：tomcat最大上传大小不能超过1048576字节。"><a href="#原因：tomcat最大上传大小不能超过1048576字节。" class="headerlink" title="原因：tomcat最大上传大小不能超过1048576字节。"></a>原因：tomcat最大上传大小不能超过1048576字节。</h3><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在springboot启动类中通过配置bean来修改上传文件大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public MultipartConfigElement multipartConfigElement() &#123;</span><br><span class="line">MultipartConfigFactory factory = new MultipartConfigFactory();</span><br><span class="line">// 文件最大</span><br><span class="line">factory.setMaxFileSize(&quot;100MB&quot;); // KB,MB</span><br><span class="line">/// 设置总上传数据总大小</span><br><span class="line">factory.setMaxRequestSize(&quot;100MB&quot;);</span><br><span class="line">return factory.createMultipartConfig();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类中还要加一个@Configuration注解</p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;springboot文件上传报org-apache-tomcat-util-http-fileupload-FileUploadBase-FileSizeLimitExceededException-The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes-异常&quot;&gt;&lt;a href=&quot;#springboot文件上传报org-apache-tomcat-util-http-fileupload-FileUploadBase-FileSizeLimitExceededException-The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes-异常&quot; class=&quot;headerlink&quot; title=&quot;springboot文件上传报org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes.异常&quot;&gt;&lt;/a&gt;springboot文件上传报org.apache.tomcat.util.http.fileupload.FileUploadBase$FileSizeLimitExceededException: The field file exceeds its maximum permitted size of 1048576 bytes.异常&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Springboot" scheme="http://yoursite.com/tags/Springboot/"/>
    
      <category term="异常" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo写文章与删除文章</title>
    <link href="http://yoursite.com/2019/09/03/%E5%85%B3%E4%BA%8Ehexo%E5%86%99%E6%96%87%E7%AB%A0%E4%B8%8E%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/09/03/关于hexo写文章与删除文章/</id>
    <published>2019-09-03T05:35:37.000Z</published>
    <updated>2019-09-05T07:04:37.959Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 添加ico</p><h4 id="hexo写文章命令："><a href="#hexo写文章命令：" class="headerlink" title="hexo写文章命令："></a>hexo写文章命令：</h4><p>1:进入hexo文件夹，鼠标右击，点击Git bash Here,进入git命令行</p><a id="more"></a><p>2：添加文章命令：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;关于hexo写文章与删除文章&quot;</span><br></pre></td></tr></table></figure></p><pre><code>此时在source\_posts目录下会生成一个.md文件</code></pre><p>3：本地查看阅览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>4:推送到远端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>hexo生成文件并推送到远端</p><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><p>1：删除db<br>2：删除xx.md<br>3:hexo clean<br>4:hexo g<br>5:hexo d</p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 添加ico&lt;/p&gt;
&lt;h4 id=&quot;hexo写文章命令：&quot;&gt;&lt;a href=&quot;#hexo写文章命令：&quot; class=&quot;headerlink&quot; title=&quot;hexo写文章命令：&quot;&gt;&lt;/a&gt;hexo写文章命令：&lt;/h4&gt;&lt;p&gt;1:进入hexo文件夹，鼠标右击，点击Git bash Here,进入git命令行&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>shiro Realm中注入userService失败</title>
    <link href="http://yoursite.com/2019/09/03/shiro-Realm%E4%B8%AD%E6%B3%A8%E5%85%A5userService%E5%A4%B1%E8%B4%A5/"/>
    <id>http://yoursite.com/2019/09/03/shiro-Realm中注入userService失败/</id>
    <published>2019-09-03T05:10:04.000Z</published>
    <updated>2019-09-05T06:07:03.256Z</updated>
    
    <content type="html"><![CDATA[<p>realm调用userService查询时null?<br>    userService Bean没有注入到spring容器中。<br>    <a id="more"></a></p><h4 id="具体异常输出"><a href="#具体异常输出" class="headerlink" title="具体异常输出"></a>具体异常输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException: null</span><br><span class="line">at com.xxx.application.auth.CustomRealm.doGetAuthenticationInfo(CustomRealm.java:44) ~[classes/:na]</span><br><span class="line">at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:571) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198) ~[shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106) [shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:274) [shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:260) [shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at com.xxx.application.controller.UserTestController.login(UserTestController.java:69) [classes/:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) [spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) [spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) [spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90) [shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83) [shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:387) [shiro-core-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125) [shiro-web-1.4.0.jar:1.4.0]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) [spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.16.jar:9.0.16]</span><br><span class="line">at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]</span><br></pre></td></tr></table></figure><p>解决方法<br>直接在shiroconfig中修改<br>原来的shiroconfig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean(name=&quot;securityManager&quot;)</span><br><span class="line">public SecurityManager securityManager()&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">//将自定义的Realm 交给安全管理器管理</span><br><span class="line">securityManager.setRealm(new CustomRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Bean(name=&quot;securityManager&quot;)</span><br><span class="line">public SecurityManager securityManager(@Qualifier(&quot;customRealm&quot;) CustomRealm customRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">//将自定义的Realm 交给安全管理器管理</span><br><span class="line">securityManager.setRealm(customRealm);</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean(name=&quot;customRealm&quot;)</span><br><span class="line">public CustomRealm myRealm()&#123;</span><br><span class="line">CustomRealm customRealm = new CustomRealm();</span><br><span class="line">return customRealm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ShiroConfiguration中要使用@Bean在ApplicationContext注入MyRealm，不能直接new对象。<br>道理和Controller中调用Service一样，都要是SpringBean，不能自己new。</p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;realm调用userService查询时null?&lt;br&gt;    userService Bean没有注入到spring容器中。&lt;br&gt;
    
    </summary>
    
    
      <category term="shiro" scheme="http://yoursite.com/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2019/08/22/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/22/单例模式/</id>
    <published>2019-08-22T08:42:54.000Z</published>
    <updated>2019-09-05T05:51:38.983Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">菜鸟教程单例模式</a></p><h3 id="单例是什么？"><a href="#单例是什么？" class="headerlink" title="单例是什么？"></a>单例是什么？</h3><p> 单例是在整个程序生命周期中只会创建一次实例的对象,不会被其他对象实例化,节省了系统开销</p> <a id="more"></a><h3 id="实现单例的三种方法"><a href="#实现单例的三种方法" class="headerlink" title="实现单例的三种方法"></a>实现单例的三种方法</h3><pre><code>1 懒汉式单例</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    public class Signleton &#123;</span><br><span class="line">//懒汉式单例非安全的</span><br><span class="line"></span><br><span class="line">//static 静态的保证程序在启动时就实例化对象</span><br><span class="line">private static Signleton signleton;</span><br><span class="line"></span><br><span class="line">public static Signleton getSignleton()&#123;</span><br><span class="line">if (signleton == null) &#123;</span><br><span class="line">return new Signleton();</span><br><span class="line">&#125;</span><br><span class="line">return signleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 私有其构造方法外部类无法创建实例对象</span><br><span class="line"> */</span><br><span class="line">private Signleton()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2懒汉时安全单例，只是加了synchronized关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Signleton2&#123;</span><br><span class="line"></span><br><span class="line">private static Signleton2 signleton2;</span><br><span class="line">/**</span><br><span class="line"> * 添加synchronized关键字，线程同步</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static synchronized Signleton2 getSignleton()&#123;</span><br><span class="line">if (signleton2 == null) &#123;</span><br><span class="line">return new Signleton2();</span><br><span class="line">&#125;</span><br><span class="line">return signleton2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private Signleton2()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3饿汉式单例<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> class Signleton3&#123;</span><br><span class="line">// 饿汉式是安全的单例</span><br><span class="line">private static Signleton3 signleton3 = new Signleton3();</span><br><span class="line"></span><br><span class="line">public static Signleton3 getSignleton3()&#123;</span><br><span class="line">return signleton3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Signleton3()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/singleton-pattern.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程单例模式&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;单例是什么？&quot;&gt;&lt;a href=&quot;#单例是什么？&quot; class=&quot;headerlink&quot; title=&quot;单例是什么？&quot;&gt;&lt;/a&gt;单例是什么？&lt;/h3&gt;&lt;p&gt; 单例是在整个程序生命周期中只会创建一次实例的对象,不会被其他对象实例化,节省了系统开销&lt;/p&gt;
    
    </summary>
    
    
      <category term="--单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="http://yoursite.com/2019/08/21/MybatisPlus/"/>
    <id>http://yoursite.com/2019/08/21/MybatisPlus/</id>
    <published>2019-08-21T07:59:25.000Z</published>
    <updated>2019-09-10T07:45:44.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus-代码生成器"><a href="#Mybatis-Plus-代码生成器" class="headerlink" title="Mybatis-Plus 代码生成器"></a>Mybatis-Plus 代码生成器</h1><h1 id="1-什么是Mybatis-Plus？"><a href="#1-什么是Mybatis-Plus？" class="headerlink" title="1:什么是Mybatis-Plus？"></a>1:什么是Mybatis-Plus？</h1><h3 id="MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。"><a href="#MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。" class="headerlink" title="MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。"></a>MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。</h3><h1 id="2：使用Mybatis-Plus的好处？"><a href="#2：使用Mybatis-Plus的好处？" class="headerlink" title="2：使用Mybatis-Plus的好处？"></a>2：使用Mybatis-Plus的好处？</h1><h3 id="开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。"><a href="#开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。" class="headerlink" title="开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。"></a>开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。</h3><a id="more"></a><h2 id="开始配置Mybatis-PLus代码生成器"><a href="#开始配置Mybatis-PLus代码生成器" class="headerlink" title="开始配置Mybatis-PLus代码生成器"></a>开始配置Mybatis-PLus代码生成器</h2><h2 id="创建一个springboot项目在pom文件中添加依赖"><a href="#创建一个springboot项目在pom文件中添加依赖" class="headerlink" title="创建一个springboot项目在pom文件中添加依赖"></a>创建一个springboot项目在pom文件中添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Mysql 连接驱动--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">&lt;!-- mybatisPlus 代码生成 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 使用freemarer模板引擎 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.28&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个类CodeGenerator，直接执行main方法就可以，代码如下"><a href="#创建一个类CodeGenerator，直接执行main方法就可以，代码如下" class="headerlink" title="创建一个类CodeGenerator，直接执行main方法就可以，代码如下"></a>创建一个类CodeGenerator，直接执行main方法就可以，代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">public class CodeGenerator &#123;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * &lt;p&gt;</span><br><span class="line">  * 读取控制台内容</span><br><span class="line">  * &lt;/p&gt;</span><br><span class="line">  */</span><br><span class="line"> public static String scanner(String tip) &#123;</span><br><span class="line">     Scanner scanner = new Scanner(System.in);</span><br><span class="line">     StringBuilder help = new StringBuilder();</span><br><span class="line">     help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class="line">     System.out.println(help.toString());</span><br><span class="line">     if (scanner.hasNext()) &#123;</span><br><span class="line">         String ipt = scanner.next();</span><br><span class="line">         if (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">             return ipt;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">     // 代码生成器</span><br><span class="line">     AutoGenerator mpg = new AutoGenerator();</span><br><span class="line">     </span><br><span class="line">     /**</span><br><span class="line">      * 使用了非默认模板引擎</span><br><span class="line">      */</span><br><span class="line">     // set freemarker engine</span><br><span class="line">     mpg.setTemplateEngine(new FreemarkerTemplateEngine());</span><br><span class="line">     </span><br><span class="line">     // 全局配置</span><br><span class="line">     GlobalConfig gc = new GlobalConfig();</span><br><span class="line">     final String projectPath = System.getProperty(&quot;user.dir&quot;);</span><br><span class="line">     gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);</span><br><span class="line">     gc.setAuthor(&quot;zyk&quot;);//作者</span><br><span class="line">     gc.setOpen(false);</span><br><span class="line">     // gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br><span class="line">     mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">     // 数据源配置</span><br><span class="line">     DataSourceConfig dsc = new DataSourceConfig();</span><br><span class="line">     dsc.setUrl(&quot;jdbc:mysql://localhost:3306/database?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;);</span><br><span class="line">     // dsc.setSchemaName(&quot;public&quot;);</span><br><span class="line">     dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">     dsc.setUsername(&quot;root&quot;);</span><br><span class="line">     dsc.setPassword(&quot;密码&quot;);</span><br><span class="line">     mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">     // 包配置</span><br><span class="line">     final PackageConfig pc = new PackageConfig();</span><br><span class="line">     pc.setModuleName(scanner(&quot;模块名&quot;));//模块名</span><br><span class="line">     pc.setParent(&quot;com.xxx.demo&quot;);//项目名</span><br><span class="line">     mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">     // 自定义配置</span><br><span class="line">     InjectionConfig cfg = new InjectionConfig() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void initMap() &#123;</span><br><span class="line">             // to do nothing</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     // 如果模板引擎是 freemarker</span><br><span class="line">     String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span><br><span class="line">     // 如果模板引擎是 velocity</span><br><span class="line">     // String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><span class="line"></span><br><span class="line">     // 自定义输出配置</span><br><span class="line">     List&lt;FileOutConfig&gt; focList = new ArrayList&lt;FileOutConfig&gt;();</span><br><span class="line">     // 自定义配置会被优先输出</span><br><span class="line">     focList.add(new FileOutConfig(templatePath) &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String outputFile(TableInfo tableInfo) &#123;</span><br><span class="line">             // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br><span class="line">             return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()</span><br><span class="line">                     + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     /*</span><br><span class="line">     cfg.setFileCreate(new IFileCreate() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span><br><span class="line">             // 判断自定义文件夹是否需要创建</span><br><span class="line">             checkDir(&quot;调用默认方法创建的目录&quot;);</span><br><span class="line">             return false;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     */</span><br><span class="line">     cfg.setFileOutConfigList(focList);</span><br><span class="line">     mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">     // 配置模板</span><br><span class="line">     TemplateConfig templateConfig = new TemplateConfig();</span><br><span class="line"></span><br><span class="line">     // 配置自定义输出模板</span><br><span class="line">     //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span><br><span class="line">     // templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span><br><span class="line">     // templateConfig.setService();</span><br><span class="line">     // templateConfig.setController();</span><br><span class="line"></span><br><span class="line">     templateConfig.setXml(null);</span><br><span class="line">     mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">     // 策略配置</span><br><span class="line">     StrategyConfig strategy = new StrategyConfig();</span><br><span class="line">     strategy.setNaming(NamingStrategy.underline_to_camel);// 数据库表映射到实体的命名策略</span><br><span class="line">     strategy.setColumnNaming(NamingStrategy.underline_to_camel);// 数据库表字段映射到实体的命名策略, 未指定按照 naming 执行</span><br><span class="line">//     strategy.setSuperEntityClass(&quot;com.xxx.application.common.BaseEntity&quot;);//自定义继承的Entity类全称，带包名</span><br><span class="line">     strategy.setEntityLombokModel(true);// 是否为lombok模型</span><br><span class="line">     strategy.setRestControllerStyle(true);// 生成 @RestController 控制器</span><br><span class="line">     // 公共父类</span><br><span class="line">//     strategy.setSuperControllerClass(&quot;com.xxx.application.common.BaseController&quot;);</span><br><span class="line">     // 写于父类中的公共字段</span><br><span class="line">//     strategy.setSuperEntityColumns(&quot;id&quot;);</span><br><span class="line">     strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><span class="line">     strategy.setControllerMappingHyphenStyle(true); // 驼峰转连字符 如 umps_user 变为 upms/user</span><br><span class="line">     strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);// 表前缀</span><br><span class="line">     mpg.setStrategy(strategy);</span><br><span class="line">     mpg.setTemplateEngine(new FreemarkerTemplateEngine());//设置模板引擎类型，默认为 velocity</span><br><span class="line">     mpg.execute();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- # 使用 pv 记录方式，每访问一次，记录一次--> <p><span id="busuanzi_container_page_pv">  本文总阅读量<span id="busuanzi_value_page_pv"></span>次</span></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis-Plus-代码生成器&quot;&gt;&lt;a href=&quot;#Mybatis-Plus-代码生成器&quot; class=&quot;headerlink&quot; title=&quot;Mybatis-Plus 代码生成器&quot;&gt;&lt;/a&gt;Mybatis-Plus 代码生成器&lt;/h1&gt;&lt;h1 id=&quot;1-什么是Mybatis-Plus？&quot;&gt;&lt;a href=&quot;#1-什么是Mybatis-Plus？&quot; class=&quot;headerlink&quot; title=&quot;1:什么是Mybatis-Plus？&quot;&gt;&lt;/a&gt;1:什么是Mybatis-Plus？&lt;/h1&gt;&lt;h3 id=&quot;MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。&quot;&gt;&lt;a href=&quot;#MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD-无侵入，内置代码生成，sql性能解析-内置分页。&quot; class=&quot;headerlink&quot; title=&quot;MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。&quot;&gt;&lt;/a&gt;MybatisPlus是一个开源的ORM框架，是对mybatis框架的增强，宣传只做增强不做修改，强大的CURD,无侵入，内置代码生成，sql性能解析,内置分页。&lt;/h3&gt;&lt;h1 id=&quot;2：使用Mybatis-Plus的好处？&quot;&gt;&lt;a href=&quot;#2：使用Mybatis-Plus的好处？&quot; class=&quot;headerlink&quot; title=&quot;2：使用Mybatis-Plus的好处？&quot;&gt;&lt;/a&gt;2：使用Mybatis-Plus的好处？&lt;/h1&gt;&lt;h3 id=&quot;开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。&quot;&gt;&lt;a href=&quot;#开发速度大大加快，使用Mybatis-Plus生成器可以生成-mapper、xml、service-、serviceImpl、controller-还有强大的条件构造器，单表查询nosql。&quot; class=&quot;headerlink&quot; title=&quot;开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。&quot;&gt;&lt;/a&gt;开发速度大大加快，使用Mybatis-Plus生成器可以生成 mapper、xml、service 、serviceImpl、controller,还有强大的条件构造器，单表查询nosql。&lt;/h3&gt;
    
    </summary>
    
    
      <category term="MybatisPlus" scheme="http://yoursite.com/tags/MybatisPlus/"/>
    
  </entry>
  
</feed>
